/* eslint-disable */
// @generated by protobuf-ts 2.0.0 with parameter long_type_string
// @generated from protobuf file "messages.proto" (package "serialize", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { MessageType, UnknownFieldHandler, WireType } from '@protobuf-ts/runtime'

/**
 * @generated from protobuf message serialize.RaidMessage
 */
export interface RaidMessage {
  /**
   * @generated from protobuf field: int32 raid = 1;
   */
  raid: number
  /**
   * @generated from protobuf field: string roomId = 2;
   */
  roomId: string
  /**
   * @generated from protobuf field: string msg = 3;
   */
  msg: string
  /**
   * @generated from protobuf field: string timestamp = 4;
   */
  timestamp: string
}
/**
 * @generated from protobuf message serialize.SubscribeRequest
 */
export interface SubscribeRequest {
  /**
   * @generated from protobuf field: string config = 1;
   */
  config: string
  /**
   * @generated from protobuf field: repeated int32 raid = 2;
   */
  raid: number[]
}
// @generated message type with reflection information, may provide speed optimized methods
class RaidMessage$Type extends MessageType<RaidMessage> {
  constructor() {
    super('serialize.RaidMessage', [
      { no: 1, name: 'raid', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 2, name: 'roomId', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'msg', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'timestamp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ])
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: RaidMessage
  ): RaidMessage {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* int32 raid */ 1:
          message.raid = reader.int32()
          break
        case /* string roomId */ 2:
          message.roomId = reader.string()
          break
        case /* string msg */ 3:
          message.msg = reader.string()
          break
        case /* string timestamp */ 4:
          message.timestamp = reader.string()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`)
          const d = reader.skip(wireType)
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d)
      }
    }
    return message
  }
  internalBinaryWrite(message: RaidMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* int32 raid = 1; */
    if (message.raid !== 0) writer.tag(1, WireType.Varint).int32(message.raid)
    /* string roomId = 2; */
    if (message.roomId !== '') writer.tag(2, WireType.LengthDelimited).string(message.roomId)
    /* string msg = 3; */
    if (message.msg !== '') writer.tag(3, WireType.LengthDelimited).string(message.msg)
    /* string timestamp = 4; */
    if (message.timestamp !== '') writer.tag(4, WireType.LengthDelimited).string(message.timestamp)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message serialize.RaidMessage
 */
export const RaidMessage = new RaidMessage$Type()
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeRequest$Type extends MessageType<SubscribeRequest> {
  constructor() {
    super('serialize.SubscribeRequest', [
      { no: 1, name: 'config', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'raid', kind: 'scalar', repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
    ])
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SubscribeRequest
  ): SubscribeRequest {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string config */ 1:
          message.config = reader.string()
          break
        case /* repeated int32 raid */ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.raid.push(reader.int32())
          else message.raid.push(reader.int32())
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`)
          const d = reader.skip(wireType)
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d)
      }
    }
    return message
  }
  internalBinaryWrite(message: SubscribeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* string config = 1; */
    if (message.config !== '') writer.tag(1, WireType.LengthDelimited).string(message.config)
    /* repeated int32 raid = 2; */
    if (message.raid.length) {
      writer.tag(2, WireType.LengthDelimited).fork()
      for (let i = 0; i < message.raid.length; i++) writer.int32(message.raid[i])
      writer.join()
    }
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message serialize.SubscribeRequest
 */
export const SubscribeRequest = new SubscribeRequest$Type()
